classdef optimize_logL < handle
%  Purpose:
%
%    Estimate the optimal parameter vector and the Quasi-Maximum
%    Likelihood (QML) covariance matrix associated with the optimal
%    parameters.
%
%  Input:
%
%    The model handle and flags to control the process of optimization, the
%    estimation of the OPG and QML matrices, and the algorithm to calculate
%    the Hessian matrix during the optimization.
%
%  Output:
%
%    The vector of optimal model parameters, its QML covariance matrix, the
%    maximum value of the log-likelihood function, and the relative 
%    difference between the Fisher information matrix and the OPG estimate.
%
%  References:
%
%    1) Forecasting, structural time series models and the Kalman filter
%       A.C. Harvey, 1990
%    2) Time Series Analysis, J.D. Hamilton, 1994
%    3) Maximum Likelihood Estimation of Misspecified Models
%       H. White, Econometrica, 50(1), 1–25 (1982)
%    
%  Notes:
%
%    The QML estimate for the covariance matrix is based on White (1982).
%    It is chosen as an estimate that may reasonably account for cases
%    where the innovations are not iid Gaussian. In Theorem 3.2 he mentions
%    the asymptotic normality property. This is the distribution which we
%    use for out-of-sample forecasting.
%
%    White recommends various hypothesis tests, such as the Information
%    Matrix Test (Theorem 4.1) for misspecification and the Hausman Test
%    (Theorem 5.1) for parameter estimator inconsistency. For the moment,
%    the routine only provides the relative difference between the Fisher
%    information matrix (negative Hessian) and the OPG estimate to test for
%    model misspecification. If the model is correctly specified (i.e. the
%    innovations are iid Gaussian for the case of the Kalman filter), then 
%    the Fisher matrix is equal to the OPG estimate.
%
%  Author : Georgios Magkotsios
%  Version: February 2012
%  Initial: November 2011
%
    properties (Access = 'private')
        % The parameter vector begins with the lambda vector, and then
        % merges the non-zero elements of the rest of the model containers.
        % Each element of param_vec_len marks the ending position of each 
        % model container in the parameter vector. Specifically,
        % param_vec_len(1): ending position of lambda vector
        % param_vec_len(2): ending position of mu vector
        % param_vec_len(3): ending position of state parameter matrix
        % param_vec_len(4): ending position of state covariance matrix
        % param_vec_len(5): ending position of measurement covariance
        %                   matrix (and of the parameter vector)
        param_vec_len

        % sizes of model matrices
        state_par_dim
        state_cov_dim
        meas_cov_dim

        % non-zero element indices of model matrices
        state_par_idx
        state_cov_idx
        meas_cov_idx

        % Fisher information matrix (negative Hessian), OPG matrix, maximum
        % log-likelihood, QML covariance matrix, and the parameter vector
        Fisher_mat
        OPG_mat
        logL_max
        QML_covariance
        parameter_vector

        % Model name and vector of gradients generated by the optimization
        % algorithm. This vector should be close to zero for successful
        % optimization.
        model_name
        grad_vec

        % flags for optimization, the calculation of the OPG estimator, and
        % the algorithm for the estimation of the Hessian matrix 
        perform_optimization
        estimate_OPG_QML_flag
        automatic_hessian

        % control for input data source (FED/Fama-Bliss)
        use_fed_data

        % control for optimization package (MATLAB/TOMLAB)
        use_TOMLAB_package

        % start and end times
        tStart
        tEnd
    end

    methods
        % class default constructor
        function QML = optimize_logL(model_handle,perform_optimization, ...
                            estimate_OPG_QML_flag,automatic_hessian, ...
                            use_fed_data,use_TOMLAB_package)

            % start the clock to measure performance 
            QML.tStart = tic;

            % get the property structure and use as input to the filter
            model_struct = get_property_struct(model_handle);

            % set the model name, and the flags for optimization, Hessian
            % estimation method, OPG estimation, input data source and
            % optimization package (MATLAB/TOMLAB)
            QML.model_name            = model_struct.model_name;
            QML.perform_optimization  = perform_optimization;
            QML.estimate_OPG_QML_flag = estimate_OPG_QML_flag;
            QML.automatic_hessian     = automatic_hessian;
            QML.use_fed_data          = use_fed_data;
            QML.use_TOMLAB_package    = use_TOMLAB_package;

            % save the sizes of the model matrices
            QML.state_par_dim = size(model_struct.state_par);
            QML.state_cov_dim = size(model_struct.state_cov);
            QML.meas_cov_dim  = size(model_struct.meas_cov);

            % copy the parameter vector, the container separator that marks
            % the ending position of containers in the parameter vector,
            % and the indices of non-zero elements in the state matrices
            QML.parameter_vector = model_struct.parameter_vector;
            QML.param_vec_len    = model_struct.param_vec_len;
            QML.state_par_idx    = model_struct.state_par_idx;
            QML.state_cov_idx    = model_struct.state_cov_idx;
            QML.meas_cov_idx     = model_struct.meas_cov_idx;

            % print a message
            fprintf('\n*************************\n');
            fprintf(['Initiating model ' QML.model_name '\n']);
            fprintf('*************************\n');

            % optimize model, estimate the optimal parameter values and the
            % Fisher information matrix (negative Hessian), and save the
            % maximum value of the log-likelihood function
            if QML.perform_optimization
                % set warning verbose on to identify frequent warning
                % handles, and turn off some of these frequent warnings
                % during the optimization
                warning verbose on
                warning('off', 'MATLAB:nearlySingularMatrix')
                warning('off', 'MATLAB:illConditionedMatrix')
                warning('off', 'MATLAB:singularMatrix')
                warning('off', 'MATLAB:quadv:MaxFcnCount')
                warning('off', 'MATLAB:quadv:ImproperFcnValue')

                fprintf('\n-------------------------------\n');
                fprintf('Starting the model optimization\n');
                fprintf('-------------------------------\n');

                % run the optimization routine
                if QML.use_TOMLAB_package
                    optimize_model_tomlab(QML);
                else
                    optimize_model(QML);
                end

                % turn back on all warnings and shut off the verbose mode
                warning on all
                warning verbose off
            else
                % define the output directory name to load the files from
                if QML.use_fed_data
                    dirname = 'output_fed_optimization';
                else
                    dirname = 'output_fama_bliss_optimization';
                end
                if ~exist(dirname,'dir')
                    error(['Directory "' dirname '" not found.\n']);
                end

                % write a message
                fprintf('\n--------------------------------------\n');
                fprintf(['Loading data from "' dirname '"\n']);
                fprintf('---------------------------------------\n');

                % load the optimal parameter vector
                filename = [QML.model_name '_parameter_vector.mat'];
                mat_path = [dirname '/' filename];
                load_struct = load(mat_path);
                QML.parameter_vector = load_struct.parameter_vector;

                % load the Fisher information matrix
                filename = [QML.model_name '_Fisher_matrix.mat'];
                mat_path = [dirname '/' filename];
                load_struct = load(mat_path);
                QML.Fisher_mat = load_struct.Fisher_mat;

                % load the maximum value of the log-likelihood function
                filename = [QML.model_name '_logL_max.mat'];
                mat_path = [dirname '/' filename];
                load_struct = load(mat_path);
                QML.logL_max = load_struct.logL_max;
            end 

            % estimate the OPG matrix and the QML covariance
            if QML.estimate_OPG_QML_flag
                % Set warning verbose on to identify frequent warning
                % handles, and turn off some of these frequent warnings
                % during the OPG estimation
                warning verbose on
                warning('off', 'MATLAB:nearlySingularMatrix')
                warning('off', 'MATLAB:illConditionedMatrix')
                warning('off', 'MATLAB:singularMatrix')

                % write a message
                fprintf('\n-----------------------------------\n');
                fprintf('Estimating the OPG and QML matrices\n');
                fprintf('-----------------------------------\n');

                % estimate the OPG and QML covariances
                estimate_OPG_QML_matrices(QML);

                % Turn back on all warnings and shut off the verbose mode
                warning on all
                warning verbose off
            end

            % stop the clock that measures the performance 
            QML.tEnd = toc(QML.tStart);

            % export results
            fprintf('\n---------------------\n');
            fprintf('Creating output files\n');
            fprintf('---------------------\n');
            export_results(QML);
        end
    end

    methods (Access = 'private')
        obj_out = choose_model(QML,vec1,vec2,mat1,mat2,mat3,use_fed_data)
        estimate_OPG_QML_matrices(QML)
        export_results(QML)
        [lambda mu state_par state_cov meas_cov] = extract_parameters(QML,x)
        optimize_model(QML)
    end

end